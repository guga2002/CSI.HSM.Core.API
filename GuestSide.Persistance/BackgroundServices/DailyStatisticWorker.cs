using Domain.Core.Data;
using Domain.Core.Entities.Statistic;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace Core.Persistance.BackgroundServices;

public class DailyStatisticWorker : IHostedService, IDisposable
{
    private readonly IServiceProvider _serviceProvider;
    private readonly ILogger<DailyStatisticWorker> _logger;
    private Timer _timer;
    private bool _isProcessing = false;

    public DailyStatisticWorker(IServiceProvider serviceProvider, ILogger<DailyStatisticWorker> logger)
    {
        _serviceProvider = serviceProvider;
        _logger = logger;
    }

    public Task StartAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("DailyStatisticWorker started.");
        _timer = new Timer(async _ => await ExecuteAsync(), null, TimeSpan.Zero, TimeSpan.FromHours(24));
        return Task.CompletedTask;
    }

    private async Task ExecuteAsync()
    {
        if (_isProcessing) return;
        _isProcessing = true;

        try
        {
            using var scope = _serviceProvider.CreateScope();
            var db = scope.ServiceProvider.GetRequiredService<GuestSideDb>();

            var today = DateTime.UtcNow.Date;
            var tomorrow = today.AddDays(1);

            if (db.DailyStatistics.Any(s => s.Date == today))
            {
                _logger.LogInformation("Today's statistics already recorded.");
                return;
            }

            var totalTasksCreated = db.Tasks.Count(t => t.CreatedAt >= today && t.CreatedAt < tomorrow);
            var tasksCompleted = db.Tasks.Count(t => t.IsCompleted && t.UpdatedAt >= today && t.UpdatedAt < tomorrow);
            var tasksOverdue = db.Tasks.Count(t => !t.IsCompleted && t.DueDate < today);

            var totalFeedbacks = db.Feedbacks.Count(f => f.CreatedAt >= today && f.CreatedAt < tomorrow);
            var positiveFeedbacks = db.Feedbacks.Count(f => f.Rating >= 4 && f.CreatedAt >= today && f.CreatedAt < tomorrow);
            var negativeFeedbacks = db.Feedbacks.Count(f => f.Rating <= 2 && f.CreatedAt >= today && f.CreatedAt < tomorrow);

            var supportsOpened = db.StaffSupports.Count(s => s.CreatedAt >= today && s.CreatedAt < tomorrow);
            var supportsResolved = db.StaffSupports.Count(s =>
                s.ResolvedDate.HasValue &&
                s.ResolvedDate.Value >= today && s.ResolvedDate.Value < tomorrow);

            var stats = new DailyStatistic
            {
                Date = today,
                TotalTasksCreated = totalTasksCreated,
                TasksCompleted = tasksCompleted,
                TasksOverdue = tasksOverdue,
                TotalFeedbacks = totalFeedbacks,
                PositiveFeedbacks = positiveFeedbacks,
                NegativeFeedbacks = negativeFeedbacks,
                SupportRequestsOpened = supportsOpened,
                SupportRequestsResolved = supportsResolved,
                Notes = "Auto-generated by CSI system"
            };

            db.DailyStatistics.Add(stats);
            await db.SaveChangesAsync();

            _logger.LogInformation("Daily statistics recorded for {date}", today.ToShortDateString());
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to generate daily statistics.");
        }
        finally
        {
            _isProcessing = false;
        }
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("DailyStatisticWorker stopped.");
        _timer?.Change(Timeout.Infinite, 0);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
